/* @flow */

/**
 * VNode类
 */
export default class VNode {
  tag: string | void;                               // 标签名
  data: VNodeData | void;                           // 属性
  children: ?Array<VNode>;                          // 子元素
  text: string | void;                              // 文本内容
  elm: Node | void;                                 // Dom 节点
  ns: string | void;                                //
  context: Component | void;                        // 当前渲染组件的作用域上下文
  key: string | number | void;                      // 
  componentOptions: VNodeComponentOptions | void;   // 组件options
  componentInstance: Component | void;              // 组件实例
  parent: VNode | void;                             // component placeholder node

  // strictly internal
  raw: boolean;                                     // contains raw HTML? (server only)
  isStatic: boolean;                                // 是否静态节点node
  isRootInsert: boolean;                            // necessary for enter transition check
  isComment: boolean;                               // 是否注释节点
  isCloned: boolean;                                // 是否克隆节点
  isOnce: boolean;                                  // is a v-once node?
  asyncFactory: Function | void;                    // 异步组件工厂方法
  asyncMeta: Object | void;                         // 
  isAsyncPlaceholder: boolean;                      // 
  ssrContext: Object | void;                        // ssr的作用域上下文
  fnContext: Component | void;                      // 函数式组件的作用域上下文
  fnOptions: ?ComponentOptions;                     // for SSR caching
  devtoolsMeta: ?Object;                            // used to store functional render context for devtools
  fnScopeId: ?string;                               // functional scope id support

  constructor (
    tag?: string,
    data?: VNodeData,
    children?: ?Array<VNode>,
    text?: string,
    elm?: Node,
    context?: Component,
    componentOptions?: VNodeComponentOptions,
    asyncFactory?: Function
  ) {
    this.tag = tag
    this.data = data
    this.children = children
    this.text = text
    this.elm = elm
    this.ns = undefined
    this.context = context
    this.fnContext = undefined
    this.fnOptions = undefined
    this.fnScopeId = undefined
    this.key = data && data.key
    this.componentOptions = componentOptions
    this.componentInstance = undefined
    this.parent = undefined
    this.raw = false
    this.isStatic = false
    this.isRootInsert = true
    this.isComment = false
    this.isCloned = false
    this.isOnce = false
    this.asyncFactory = asyncFactory
    this.asyncMeta = undefined
    this.isAsyncPlaceholder = false
  }

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  get child (): Component | void {
    return this.componentInstance
  }
}

/**
 * 创建空的VNode节点
 * @param {*} text 
 * @return node
 */
export const createEmptyVNode = (text: string = '') => {
  const node = new VNode()
  node.text = text
  node.isComment = true
  return node
}

/**
 * 创建text VNode
 * @param {*} val 
 * @return node
 */
export function createTextVNode (val: string | number) {
  return new VNode(undefined, undefined, undefined, String(val))
}


/**
 * 拷贝VNode（浅拷贝）
 * 
 * optimized shallow clone
 * 优化浅拷贝
 * used for static nodes and slot nodes because they may be reused across multiple renders,
 * 用于静态节点和插槽节点，因为它们可以在多个渲染中重用，
 * cloning them avoids errors when DOM manipulations rely on their elm reference.
 * 当DOM操作依赖于它们的elm引用时，克隆它们可以避免错误。
 * @param {*} vnode 
 * @return node
 */
export function cloneVNode (vnode: VNode): VNode {
  const cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  )
  cloned.ns = vnode.ns
  cloned.isStatic = vnode.isStatic
  cloned.key = vnode.key
  cloned.isComment = vnode.isComment
  cloned.fnContext = vnode.fnContext
  cloned.fnOptions = vnode.fnOptions
  cloned.fnScopeId = vnode.fnScopeId
  cloned.asyncMeta = vnode.asyncMeta
  cloned.isCloned = true
  return cloned
}
