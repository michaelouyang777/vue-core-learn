/* @flow */

import Dep from './dep'
import VNode from '../vdom/vnode'
import { arrayMethods } from './array'
import {
  def,
  warn,
  hasOwn,
  hasProto,
  isObject,
  isPlainObject,
  isPrimitive,
  isUndef,
  isValidArrayIndex,
  isServerRendering
} from '../util/index'

const arrayKeys = Object.getOwnPropertyNames(arrayMethods)

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
export let shouldObserve: boolean = true

export function toggleObserving (value: boolean) {
  shouldObserve = value
}

/**
 * Observer class that is attached to each observed object. 
 * 观察者类附加到每个观察对象。
 * Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 * 一旦附加,观察者将目标对象的属性键转换成getter / setter收集依赖和调度更新。
 */
export class Observer {
  value: any;
  dep: Dep;
  vmCount: number; // number of vms that have this object as root $data

  constructor (value: any) {
    this.value = value
    // Observer类实例化的时候，会实例化一个dep对象
    this.dep = new Dep()
    this.vmCount = 0
    def(value, '__ob__', this)
    // 判断value是否为数组
    if (Array.isArray(value)) {
      if (hasProto) {
        protoAugment(value, arrayMethods)
      } else {
        copyAugment(value, arrayMethods, arrayKeys)
      }
      // 观察数组
      this.observeArray(value)
    } 
    // 不是数组就执行walk函数
    else {
      this.walk(value)
    }
  }

  /**
   * Walk through all properties and convert them into getter/setters. 
   * 遍历所有属性并将其转换为getter / setter。
   * This method should only be called when value type is Object.
   * 此方法应当是value类型是Object时调用。
   */
  walk (obj: Object) {
    const keys = Object.keys(obj)
    for (let i = 0; i < keys.length; i++) {
      defineReactive(obj, keys[i])
    }
  }

  /**
   * Observe a list of Array items.
   * 观察一个数组项列表。
   */
  observeArray (items: Array<any>) {
    for (let i = 0, l = items.length; i < l; i++) {
      observe(items[i])
    }
  }
}

// helpers

/**
 * Augment a target Object or Array by intercepting the prototype chain using __proto__
 * 通过使用__proto__截取原型链来扩充目标对象或数组
 */
function protoAugment (target, src: Object) {
  /* eslint-disable no-proto */
  target.__proto__ = src
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining hidden properties.
 * 通过定义隐藏属性来扩充目标对象或数组。
 */
/* istanbul ignore next */
function copyAugment (target: Object, src: Object, keys: Array<string>) {
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i]
    def(target, key, src[key])
  }
}

/**
 * Attempt to create an observer instance for a value,
 * 尝试为值（Array类型）创建观察者实例，
 * returns the new observer if successfully observed,
 * 如果观察成功，则返回新的观察者，
 * or the existing observer if the value already has one.
 * 或者现有的观察器（如果值已经有一个观察器）。
 */
export function observe (value: any, asRootData: ?boolean): Observer | void {
  // 不是对象 或 不是Vnode 返回
  if (!isObject(value) || value instanceof VNode) {
    return
  }

  let ob: Observer | void
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__
  }
  else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    // 子对象再次通过Observer实例化一个对象
    ob = new Observer(value)
  }

  if (asRootData && ob) {
    ob.vmCount++
  }
  
  return ob
}
  
/**
 * Define a reactive property on an Object.
 * 定义一个响应式属性的对象。
 * 
 * @param {*} obj 目标对象
 * @param {*} key 对象内的key
 * @param {*} val 对象内的key对应的value
 * @param {*} [customSetter] 
 * @param {*} [shallow] 是否浅度
 */
export function defineReactive (
  obj: Object,
  key: string,
  val: any,
  customSetter?: ?Function,
  shallow?: boolean
) {
  // 实例化一个dep对象
  const dep = new Dep()

  const property = Object.getOwnPropertyDescriptor(obj, key)
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  const getter = property && property.get
  const setter = property && property.set
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key]
  }

  // 深度把子对象遍历成响应式对象
  let childOb = !shallow && observe(val)
  
  // 使用Object.defineProperty()劫持对象的属性
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      const value = getter ? getter.call(obj) : val
      // 如果存在被观测的对象，就depend一个到Dep中收集依赖
      if (Dep.target) {
        dep.depend()
        // 如果存在子对象
        if (childOb) {
          childOb.dep.depend()
          // 如果是数组类型
          if (Array.isArray(value)) {
            dependArray(value)
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      const value = getter ? getter.call(obj) : val
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter()
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) return
      if (setter) {
        setter.call(obj, newVal)
      } else {
        val = newVal
      }
      childOb = !shallow && observe(newVal)
      // 通知Dep类触发notify
      dep.notify()
    }
  })
}

/**
 * Set a property on an object. 
 * 在一个对象上设置一个属性
 * Adds the new property and triggers change notification if the property doesn't already exist.
 * 添加新属性并在该属性不存在时触发更改通知。
 */
export function set (target: Array<any> | Object, key: any, val: any): any {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(`Cannot set reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  // 如果 target 为数组时
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    // 修改数组的长度, 避免索引>数组长度导致 splice() 执行有误
    target.length = Math.max(target.length, key)
    // 利用数组的 splice 方法触发响应式
    target.splice(key, 1, val)
    return val
  }
  // target 为对象, key 在 target 或者 target.prototype 上 且必须不能在 Object.prototype 上,直接赋值
  if (key in target && !(key in Object.prototype)) {
    target[key] = val
    return val
  }
  // 以上都不成立, 即开始给 target 创建一个全新的属性
  // 获取 Observer 实例
  const ob = (target: any).__ob__
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    )
    return val
  }
  // target 本身就不是响应式数据, 直接赋值
  if (!ob) {
    target[key] = val
    return val
  }
  // 进行响应式处理
  defineReactive(ob.value, key, val)
  // 通过observer实例拿到dep对象，调用notify方法，通知实例更新
  ob.dep.notify()
  return val
}

/**
 * Delete a property and trigger change if necessary.
 * 删除一个属性并在必要时触发更改。
 */
export function del (target: Array<any> | Object, key: any) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(`Cannot delete reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  // 如果 target 为数组时
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    // 利用数组的 splice 方法触发响应式
    target.splice(key, 1)
    return
  }
  // 获取 Observer 实例
  const ob = (target: any).__ob__
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    )
    return
  }
  // 如果target内不存在该key，则return
  if (!hasOwn(target, key)) {
    return
  }
  // 如果target内存在该key，使用delete删除掉target内的属性
  delete target[key]
  // 如果target内部存在Observer实例，说明这个target不是一个响应式对象，直接return
  if (!ob) {
    return
  }
  // 通过observer实例拿到dep对象，调用notify方法，通知实例更新
  ob.dep.notify()
}

/**
 * Collect dependencies on array elements when the array is touched, 
 * 在接触数组时收集对数组元素的依赖关系
 * since we cannot intercept array element access like property getters.
 * 因为我们不能像属性getter那样拦截数组元素访问。
 */
function dependArray (value: Array<any>) {
  for (let e, i = 0, l = value.length; i < l; i++) {
    e = value[i]
    e && e.__ob__ && e.__ob__.dep.depend()
    if (Array.isArray(e)) {
      dependArray(e)
    }
  }
}
