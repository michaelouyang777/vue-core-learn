/* @flow */

import type Watcher from './watcher'
import { remove } from '../util/index'
import config from '../config'

let uid = 0

/**
 * A dep is an observable that can have multiple directives subscribing to it.
 * Dep类是一个观察订阅者模式
 */
export default class Dep {
  // 目标watcher
  static target: ?Watcher;
  // 给watcher声明一个自增id
  id: number;
  // 用户存放所收集的依赖项（watcher）
  subs: Array<Watcher>;

  constructor () {
    this.id = uid++
    this.subs = []
  }

  // 添加一个依赖到this.subs中
  addSub (sub: Watcher) {
    this.subs.push(sub)
  }

  // 从this.subs移除一个指定的依赖
  removeSub (sub: Watcher) {
    remove(this.subs, sub)
  }

  // 添加依赖（实质调用Dep.prototype.addSub）
  depend () {
    // 如果存在目标watcher
    if (Dep.target) {
      // 调用watcher里面的addDep函数
      Dep.target.addDep(this)
    }
  }

  // 通知watcher更新
  notify () {
    // 拷贝一份所收集到的依赖（this.subs）
    const subs = this.subs.slice()
    // 如果不是生产环境，并且不是异步
    if (process.env.NODE_ENV !== 'production' && !config.async) {
      // subs aren't sorted in scheduler if not running async
      // 如果不是异步的，并且没有排序的依赖（this.subs）
      // we need to sort them now to make sure they fire in correct order
      // 我们需要排序他们（this.subs）以保证他们的触发顺序（已数字的大小，从小到大的排序）
      subs.sort((a, b) => a.id - b.id)
    }
    // 遍历this.subs中所收集的依赖，逐一更新
    for (let i = 0, l = subs.length; i < l; i++) {
      subs[i].update()
    }
  }
}

// The current target watcher being evaluated.
// 这是当前目标被evaluated的watcher
// This is globally unique because only one watcher can be evaluated at a time.
// 这是全局唯一的，因为一个watcher只能evaluated一次
Dep.target = null
const targetStack = []

export function pushTarget (target: ?Watcher) {
  targetStack.push(target)
  Dep.target = target
}

export function popTarget () {
  targetStack.pop()
  Dep.target = targetStack[targetStack.length - 1]
}
