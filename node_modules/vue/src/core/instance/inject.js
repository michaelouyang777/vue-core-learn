/* @flow */

import { hasOwn } from 'shared/util'
import { warn, hasSymbol } from '../util/index'
import { defineReactive, toggleObserving } from '../observer/index'

/**
 * 初始化provide
 * @param {*} vm 
 */
export function initProvide (vm: Component) {
  const provide = vm.$options.provide
  if (provide) {
    // 如果provide是有一个function，先执行，再把返回结果赋给_provide；
    // 如果provide不是一个function，直接赋给_provide
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide
  }
}

/**
 * 初始化inject
 * @param {*} vm 
 */
export function initInjections (vm: Component) {
  // 获取inject注入的内容
  const result = resolveInject(vm.$options.inject, vm)
  if (result) {
    toggleObserving(false)
    Object.keys(result).forEach(key => {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive(vm, key, result[key], () => {
          warn(
            `Avoid mutating an injected value directly since the changes will be ` +
            `overwritten whenever the provided component re-renders. ` +
            `injection being mutated: "${key}"`,
            vm
          )
        })
      } else {
        // 进行响应式监听
        defineReactive(vm, key, result[key])
      }
    })
    toggleObserving(true)
  }
}

/**
 * 根据当前组件实例注册的inject，查找祖先组件是否存在对应的provide
 * @param {any} inject inject is :any because flow is not smart enough to figure out cached
 * @param {*} vm 
 * @return {Object} result 返回provide的结果
 */
export function resolveInject (inject: any, vm: Component): ?Object {
  // 如果组件内有inject属性
  if (inject) {
    // 创建result空对象
    const result = Object.create(null)
    // 获取inject中的所有keys（Array类型）
    const keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject)
    // 遍历keys数组，直到拿到祖先组件的provide
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      // #6574 in case the inject object is observed...
      if (key === '__ob__') continue
      const provideKey = inject[key].from
      let source = vm
      while (source) {
        // 判断当前组件，是否有provide
        if (source._provided && hasOwn(source._provided, provideKey)) {
          // ，如果当前组件有provide，取出provide，并退出循环
          result[key] = source._provided[provideKey]
          break
        }
        // 取出当前组件的父组件vm实例
        source = source.$parent
      }
      // 如果没有传入vm实例
      if (!source) {
        if ('default' in inject[key]) {
          const provideDefault = inject[key].default
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault
        } else if (process.env.NODE_ENV !== 'production') {
          warn(`Injection "${key}" not found`, vm)
        }
      }
    }
    return result
  }
}
