/* @flow */

import { parse } from './parser/index'
import { optimize } from './optimizer'
import { generate } from './codegen/index'
import { createCompilerCreator } from './create-compiler'

/**
 * `createCompilerCreator` allows creating compilers that use alternative parser/optimizer/codegen, 
 * `createCompilerCreator`允许创建使用可选解析器/优化器/代码生成器的编译器
 * e.g the SSR optimizing compiler.
 * Here we just export a default compiler using the default parts.
 * 这里只是导出一个默认的编译器
 * 
 * 
 * 调用`createCompilerCreator`创建一个编译器对象，传入一个baseCompile函数
 * baseCompile 函数主要通过3个步骤：parse、optimize、generate来生成一个包含ast、render、staticRenderFns的对象。
 */
export const createCompiler = createCompilerCreator(function baseCompile (
  template: string,
  options: CompilerOptions
): CompiledResult {
  // parse
  // 对html模板字符串解析成AST树
  const ast = parse(template.trim(), options)

  // optimize
  // 通过optimize方法，将AST节点进行静态节点标记。
  // 为后面 patch 过程中对比新旧 VNode 树形结构做优化。
  // 被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细的比较。
  if (options.optimize !== false) {
    optimize(ast, options)
  }

  // generate
  // 根据 AST 结构拼接生成 render function 的字符串
  // generate返回的是数据结构：
  // {
  //   render,          render function字符串
  //   staticRenderFns
  // }
  const code = generate(ast, options)

  return {
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
})
