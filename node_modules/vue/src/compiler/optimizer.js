/* @flow */

/*
  optimizer旨在为语法树的节点标上static和staticRoot属性。 

  遍历第一轮，标记static属性：
  1. 判断node是否为static(有诸多条件)
  2. 标记node的children是否为static，若存在non static子节点，父节点更改为static = false

  遍历第二轮，标记staticRoot
  1. 标记static或节点为staticRoot，这个节点type === 1(一般是含有tag属性的节点)
  2. 具有v-once指令的节点同样被标记staticRoot
  3. 为了避免过度优化，只有static text为子节点的节点不被标记为staticRoot
  4. 标记节点children的staticRoot
*/

/**
 * type值说明
 * node.type === 1    // element      元素         
 * node.type === 2    // expression   插值表达式
 * node.type === 3    // text         普通文本
 */

import { makeMap, isBuiltInTag, cached, no } from 'shared/util'

let isStaticKey
let isPlatformReservedTag

const genStaticKeysCached = cached(genStaticKeys)

/**
 * Goal of the optimizer: walk the generated template AST tree and detect sub-trees that are purely static, 
 * 优化器的目标：遍历生成的模板AST树 和 检测纯静态的子树
 * i.e. parts of the DOM that never needs to change.
 * 比如：永远不需要更改的这部分DOM
 * Once we detect these sub-trees, we can:
 * 一旦我们发现这些子树
 * 1. Hoist them into constants, so that we no longer need to create fresh nodes for them on each re-render;
 *    提升它们至常量，因此我们不在需要在重新render时创建新建节点给它们
 * 2. Completely skip them in the patching process.
 *    在修补过程中完全跳过它们。
 */
export function optimize (root: ?ASTElement, options: CompilerOptions) {
  if (!root) return
  // staticKeys 是那些认为不会被更改的ast的属性
  isStaticKey = genStaticKeysCached(options.staticKeys || '')
  isPlatformReservedTag = options.isReservedTag || no
  // first pass: mark all non-static nodes.
  // 第一步 标记 AST 所有静态节点
  markStatic(root)
  // second pass: mark static roots.
  // 第二步 标记 AST 所有父节点（即子树根节点）
  markStaticRoots(root, false)
}

function genStaticKeys (keys: string): Function {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

/**
 * 标记静态节点
 * 使用的是树形数据结构的深度优先遍历算法，使用递归实现。 
 * @param {ASTNode} node AST树
 */
function markStatic (node: ASTNode) {
  node.static = isStatic(node)
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 不要使组件槽内容成为静态的。
    // 1. components not able to mutate slot nodes
    //    不能改变插槽节点的组件
    // 2. static slot content fails for hot-reloading
    //    静态插槽内容热重新加载失败
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (let i = 0, l = node.children.length; i < l; i++) {
      const child = node.children[i]
      markStatic(child)
      if (!child.static) {
        node.static = false
      }
    }
    if (node.ifConditions) {
      for (let i = 1, l = node.ifConditions.length; i < l; i++) {
        const block = node.ifConditions[i].block
        markStatic(block)
        if (!block.static) {
          node.static = false
        }
      }
    }
  }
}

/**
 * 对静态节点又做了一层筛选
 * @param {*} node 
 * @param {*} isInFor 
 */
function markStaticRoots (node: ASTNode, isInFor: boolean) {
  if (node.type === 1) {
    // 用以标记在v-for内的静态节点。这个属性用以告诉renderStatic(_m)对这个节点生成新的key，避免patch error
    if (node.static || node.once) {
      node.staticInFor = isInFor
    }
    // For a node to qualify as a static root, it should have children that are not just static text.
    // 一个节点如果想要成为静态根，它的子节点不能单纯只是静态文本。
    // Otherwise the cost of hoisting out will outweigh the benefits and it's better off to just always render it fresh.
    // 否则，把它单独提取出来还不如重渲染时总是更新它性能高。
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true
      return
    } else {
      node.staticRoot = false
    }
    if (node.children) {
      for (let i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for)
      }
    }
    if (node.ifConditions) {
      for (let i = 1, l = node.ifConditions.length; i < l; i++) {
        markStaticRoots(node.ifConditions[i].block, isInFor)
      }
    }
  }
}

/**
 * 判断是否静态节点
 * @param {*} node 
 */
function isStatic (node: ASTNode): boolean {
  // 如果是插值表达式（{{ *** }}），返回false，即不是静态
  if (node.type === 2) { // expression 表达式
    return false
  }
  // 如果是文本节点，则是静态节点，返回true，即是静态
  if (node.type === 3) { // text 文本节点
    return true
  }
  // 其他情况
  // 处理特殊标记
  return !!(node.pre || (                   // v-pre 标记的
    !node.hasBindings &&                    // no dynamic bindings  不是动态绑定的
    !node.if && !node.for &&                // not v-if or v-for or v-else  不是v-if 或 v-for
    !isBuiltInTag(node.tag) &&              // not a built-in
    isPlatformReservedTag(node.tag) &&      // not a component  不是组件的
    !isDirectChildOfTemplateFor(node) &&    
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node: ASTElement): boolean {
  while (node.parent) {
    node = node.parent
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}
